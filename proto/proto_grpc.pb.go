// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CCService_ParticipantMessages_FullMethodName = "/proto.CCService/ParticipantMessages"
	CCService_ParticipantJoins_FullMethodName    = "/proto.CCService/ParticipantJoins"
	CCService_ParticipantLeaves_FullMethodName   = "/proto.CCService/ParticipantLeaves"
)

// CCServiceClient is the client API for CCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCServiceClient interface {
	ParticipantMessages(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	ParticipantJoins(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	ParticipantLeaves(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
}

type cCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCServiceClient(cc grpc.ClientConnInterface) CCServiceClient {
	return &cCServiceClient{cc}
}

func (c *cCServiceClient) ParticipantMessages(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, CCService_ParticipantMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) ParticipantJoins(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, CCService_ParticipantJoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCServiceClient) ParticipantLeaves(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, CCService_ParticipantLeaves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCServiceServer is the server API for CCService service.
// All implementations must embed UnimplementedCCServiceServer
// for forward compatibility
type CCServiceServer interface {
	ParticipantMessages(context.Context, *ClientInfo) (*ServerInfo, error)
	ParticipantJoins(context.Context, *ClientInfo) (*ServerInfo, error)
	ParticipantLeaves(context.Context, *ClientInfo) (*ServerInfo, error)
	mustEmbedUnimplementedCCServiceServer()
}

// UnimplementedCCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCCServiceServer struct {
}

func (UnimplementedCCServiceServer) ParticipantMessages(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantMessages not implemented")
}
func (UnimplementedCCServiceServer) ParticipantJoins(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantJoins not implemented")
}
func (UnimplementedCCServiceServer) ParticipantLeaves(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantLeaves not implemented")
}
func (UnimplementedCCServiceServer) mustEmbedUnimplementedCCServiceServer() {}

// UnsafeCCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCServiceServer will
// result in compilation errors.
type UnsafeCCServiceServer interface {
	mustEmbedUnimplementedCCServiceServer()
}

func RegisterCCServiceServer(s grpc.ServiceRegistrar, srv CCServiceServer) {
	s.RegisterService(&CCService_ServiceDesc, srv)
}

func _CCService_ParticipantMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ParticipantMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCService_ParticipantMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ParticipantMessages(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_ParticipantJoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ParticipantJoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCService_ParticipantJoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ParticipantJoins(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCService_ParticipantLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServiceServer).ParticipantLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCService_ParticipantLeaves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServiceServer).ParticipantLeaves(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// CCService_ServiceDesc is the grpc.ServiceDesc for CCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CCService",
	HandlerType: (*CCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParticipantMessages",
			Handler:    _CCService_ParticipantMessages_Handler,
		},
		{
			MethodName: "ParticipantJoins",
			Handler:    _CCService_ParticipantJoins_Handler,
		},
		{
			MethodName: "ParticipantLeaves",
			Handler:    _CCService_ParticipantLeaves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

const (
	ParticipantService_ClientJoinReturn_FullMethodName   = "/proto.ParticipantService/ClientJoinReturn"
	ParticipantService_ClientLeavesReturn_FullMethodName = "/proto.ParticipantService/ClientLeavesReturn"
)

// ParticipantServiceClient is the client API for ParticipantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipantServiceClient interface {
	ClientJoinReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	ClientLeavesReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
}

type participantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipantServiceClient(cc grpc.ClientConnInterface) ParticipantServiceClient {
	return &participantServiceClient{cc}
}

func (c *participantServiceClient) ClientJoinReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, ParticipantService_ClientJoinReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) ClientLeavesReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, ParticipantService_ClientLeavesReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipantServiceServer is the server API for ParticipantService service.
// All implementations must embed UnimplementedParticipantServiceServer
// for forward compatibility
type ParticipantServiceServer interface {
	ClientJoinReturn(context.Context, *ClientInfo) (*ServerInfo, error)
	ClientLeavesReturn(context.Context, *ClientInfo) (*ServerInfo, error)
	mustEmbedUnimplementedParticipantServiceServer()
}

// UnimplementedParticipantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParticipantServiceServer struct {
}

func (UnimplementedParticipantServiceServer) ClientJoinReturn(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientJoinReturn not implemented")
}
func (UnimplementedParticipantServiceServer) ClientLeavesReturn(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientLeavesReturn not implemented")
}
func (UnimplementedParticipantServiceServer) mustEmbedUnimplementedParticipantServiceServer() {}

// UnsafeParticipantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipantServiceServer will
// result in compilation errors.
type UnsafeParticipantServiceServer interface {
	mustEmbedUnimplementedParticipantServiceServer()
}

func RegisterParticipantServiceServer(s grpc.ServiceRegistrar, srv ParticipantServiceServer) {
	s.RegisterService(&ParticipantService_ServiceDesc, srv)
}

func _ParticipantService_ClientJoinReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).ClientJoinReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_ClientJoinReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).ClientJoinReturn(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_ClientLeavesReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).ClientLeavesReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_ClientLeavesReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).ClientLeavesReturn(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ParticipantService_ServiceDesc is the grpc.ServiceDesc for ParticipantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParticipantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ParticipantService",
	HandlerType: (*ParticipantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientJoinReturn",
			Handler:    _ParticipantService_ClientJoinReturn_Handler,
		},
		{
			MethodName: "ClientLeavesReturn",
			Handler:    _ParticipantService_ClientLeavesReturn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
