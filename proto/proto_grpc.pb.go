// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientToServer_ParticipantMessages_FullMethodName = "/proto.ClientToServer/ParticipantMessages"
	ClientToServer_ParticipantJoins_FullMethodName    = "/proto.ClientToServer/ParticipantJoins"
	ClientToServer_ClientJoinReturn_FullMethodName    = "/proto.ClientToServer/ClientJoinReturn"
)

// ClientToServerClient is the client API for ClientToServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientToServerClient interface {
	ParticipantMessages(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	ParticipantJoins(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	ClientJoinReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error)
}

type clientToServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientToServerClient(cc grpc.ClientConnInterface) ClientToServerClient {
	return &clientToServerClient{cc}
}

func (c *clientToServerClient) ParticipantMessages(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, ClientToServer_ParticipantMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerClient) ParticipantJoins(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, ClientToServer_ParticipantJoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerClient) ClientJoinReturn(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, ClientToServer_ClientJoinReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientToServerServer is the server API for ClientToServer service.
// All implementations must embed UnimplementedClientToServerServer
// for forward compatibility
type ClientToServerServer interface {
	ParticipantMessages(context.Context, *ClientInfo) (*ServerInfo, error)
	ParticipantJoins(context.Context, *ClientInfo) (*ServerInfo, error)
	ClientJoinReturn(context.Context, *ClientInfo) (*ServerInfo, error)
	mustEmbedUnimplementedClientToServerServer()
}

// UnimplementedClientToServerServer must be embedded to have forward compatible implementations.
type UnimplementedClientToServerServer struct {
}

func (UnimplementedClientToServerServer) ParticipantMessages(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantMessages not implemented")
}
func (UnimplementedClientToServerServer) ParticipantJoins(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantJoins not implemented")
}
func (UnimplementedClientToServerServer) ClientJoinReturn(context.Context, *ClientInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientJoinReturn not implemented")
}
func (UnimplementedClientToServerServer) mustEmbedUnimplementedClientToServerServer() {}

// UnsafeClientToServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientToServerServer will
// result in compilation errors.
type UnsafeClientToServerServer interface {
	mustEmbedUnimplementedClientToServerServer()
}

func RegisterClientToServerServer(s grpc.ServiceRegistrar, srv ClientToServerServer) {
	s.RegisterService(&ClientToServer_ServiceDesc, srv)
}

func _ClientToServer_ParticipantMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).ParticipantMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_ParticipantMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).ParticipantMessages(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServer_ParticipantJoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).ParticipantJoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_ParticipantJoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).ParticipantJoins(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServer_ClientJoinReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServer).ClientJoinReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToServer_ClientJoinReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServer).ClientJoinReturn(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientToServer_ServiceDesc is the grpc.ServiceDesc for ClientToServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientToServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientToServer",
	HandlerType: (*ClientToServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParticipantMessages",
			Handler:    _ClientToServer_ParticipantMessages_Handler,
		},
		{
			MethodName: "ParticipantJoins",
			Handler:    _ClientToServer_ParticipantJoins_Handler,
		},
		{
			MethodName: "ClientJoinReturn",
			Handler:    _ClientToServer_ClientJoinReturn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
